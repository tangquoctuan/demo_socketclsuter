
# services-direct-message
* Cách host/ start server chat: project chia làm 3 phân đoạn để start, lần lượt start theo thứ tự như sau:
	+ Install thư viện trong package.json của từng PJ.
	+ Node version 6.14.3
	+ Tạo DB trong cho hệ thống DM trong MongoDB (bao gồm DB, username, password)
	+ Sửa thông số mongodb + redis + kafka list server trong file config.js:
	    "redis_host": "{redis_host}"
	    "mongo_endpoint": "{mongo_endpoint}",
        "mongo_username": "{mongo_username}",
        "mongo_password": "{mongo_password}",
        "mongo_database_name": "{mongo_database_name}",
        "elastic_search_endpoint": "{elastic_search_endpoint}",
        "kafka_server_list": "{kafka_server_list}",

	1. scc-state (state) -> syntax: node server.

	2. scc-broker (broker) -> syntax: SCC_STATE_SERVER_HOST='127.0.0.1' SCC_BROKER_SERVER_PORT='8888' node server
		+ SCC_STATE_SERVER_HOST: IP khi start server scc-state.
		+ SCC_BROKER_SERVER_PORT: port chạy broker.

	3. scc-worker (worker) -> syntax: SCC_STATE_SERVER_HOST='127.0.0.1' SOCKETCLUSTER_PORT='3000' node server
		+ SCC_STATE_SERVER_HOST: IP khi start server scc-state.
		+ SOCKETCLUSTER_PORT: port chạy worker.
		+ Noted: Tạo domain để client connect đến. Khi chạy mode cluster thì clone vs start server theo cú pháp như trên, chỉ cần thay đổi port.

* Client (web) connect lên server + subcribe những sự kiện để nhận data từ server.
	1. Cài thư viện: Link tổng hợp thư viện dành cho client (https://github.com/socketcluster/client-drivers#list-of-clients)
		- https://www.npmjs.com/package/socketcluster-client => Web
		- https://github.com/sacOO7/socketcluster-client-swift => IOS
		- https://github.com/sacOO7/socketcluster-client-java => Android

	2. Cách thức kết nối với server (chỉ đồi với web):
		- Thêm script: <script type="text/javascript" src="./node_modules/socketcluster-client/socketcluster.js"></script>
		- Tiến hành tạo kết nối với server theo cú pháp: -> let socket = socketCluster.connect(options);
		- Sau khi đăng nhập thành công, cần emit lên server 1 event:
			socket.emit("channel_info", {'name': channel_name, 'id': user_id, 'socket_id': socket_id, 'token': token});
			+ Đôi với token: sử dụng token của CM
		-  Tiến hành tạo 1 `socket subscribe` theo user _id -> làm private channel giúp server vs client giao tiếp với nhau và tiến hành watch (lắng nghe message push từ phía server)
			+ Syntax: socket.subscribe({user_id});
		- Đồng thời tiến hành tạo thêm 1 biến `subscribe` rỗng khi vừa load script. Sự kiện subscribe của event này sẽ giữ vai trò luân chuyển message nên về, do vậy để gán sự kiện `subscribe`  `room_id` để nhận message chat. Và event này sẽ được lồng vào sự kiện lắng nghe của event `private channel`.

	3. Định nghĩa các API
		- GET - {DM_domain}v1/dm : Get message histories (Header JWT required)
                + Body {
                        "room_id": "2684abfdf96686c54e91bb6670ee2d08",
                        "lasted_message_date": "2018-07-05T03:49:09.231Z",
                        "limit": 10 (optional)}

		- PUT - {DM_domain}v1/dm/{message_id}: update as read message (Header JWT required)

		- DELETE - {DM_domain}v1/dm: user delete conversation (Header JWT required)
                + Body {
                        "room_id": "2684abfdf96686c54e91bb6670ee2d08",
                        "user_id": "4122b5d90e84ded281b670539164ace5"}
					
	4. Đối với việc tích hợp chat live stream
	      - Client chỉ cần subcribe channels bao gồm: `{room_id}`, `{room_id}_total_view`
	            + `{room_id}`: nhận message.
	            + `{room_id}_total_view`: nhận tổng số người đang xem live stream. 
	      - Emit data lên server có tên `channel_info`
	      - Data bao gồm: {'name': channel_name, 'id': channel_id_gen, 'socket_id': socket_id, 'token': token, 'room_id': room_id}
	      - Đối với message có type `is_reaction: true` thì không hiện message lên khung chat, chỉ hiện reaction.
	      - Đối với việc push message sẽ được chia làm 2 loại event như sau:
	            + Đối với việc chỉ push message: sẽ được emit bằng event `chat`.
	            	                
	                const data = {
                                    'private_channel': key_connected,
                                    'message': message,
                                    'user_info': {
                                        'user_id': channel_id,
                                        'user_name': document.getElementById('channel_name_txt').value
                                    },
                                    'ip': '19.11.19.90',
                                    'extra': {
                                        'device_type': 'web'
                                    }
                                };
	        
	            + Đỗi với việc push reaction message: sẽ được emit bằng event `chat_reaction`.
	            
                    const data = {
                                    'private_channel': document.getElementById('room_id_txt').value.trim(),
                                    'message': message,
                                    'user_info': {
                                        'user_id': channel_id,
                                        'user_name': document.getElementById('channel_name_txt').value.trim()
                                    },
                                    'ip': '19.11.19.90',
                                    'extra': {
                                        'device_type': 'web'
                                    },
                                    'limit_reaction_key': unique_key,
                                    'reaction_limit_message': 10 -- optional (int)
                                    'reaction_expire_time': 60 -- optional (int -- second)
                                };
                
